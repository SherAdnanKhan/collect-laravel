type Query {
    # User Queries
    getMe: User @auth
	getUsers: [User] @paginate
	getUser(id: Int! @eq): User @find

	# User Favourite Queries
	getUserFavourites(userId: Int! @eq(key: "user_id")): [UserFavourite] @paginate

	# User Token Queries
	getUserTwoFactorTokens(userId: Int! @eq(key: "user_id")): [UserTwoFactorToken] @all

	# User Subscription Queries
	getSubscription(id: Int! @eq): UserSubscription @find(model: "Laravel\\Cashier\\Subscription")
	getSubscriptions(userId: Int! @eq(key: "user_id")): [UserSubscription] @paginate(model: "Laravel\\Cashier\\Subscription", defaultCount: 1)

	# Person (People) Queries
	getPerson(id: Int! @eq): Person @find
	getPeople(userId: Int @eq(key: "user_id")): [Person] @paginate

	# Project Queries
	getProject(id: Int! @eq): Project @find
	getProjects(userId: Int @eq(key: "user_id")): [Project] @paginate

	# Song Queries
	getSong(id: Int! @eq): Song @find
	getSongs(userId: Int @eq(key: "user_id")): [Song] @paginate

	# File Queries
	getFile(id: Int! @eq): File @find
	getFiles(
		userId: Int @eq(key: "user_id")
		folderId: Int @eq(key: "folder_id")
		projectId: Int @eq(key: "project_id")
	): [File] @all

	# File Queries
	getFolder(id: Int! @eq): Folder @find
	getFolders(
		userId: Int @eq(key: "user_id")
		folderId: Int @eq(key: "folder_id")
		projectId: Int @eq(key: "project_id")
	): [Folder] @all

	# Recording Queries
	getRecording(id: Int! @eq): Recording @find
	getRecordings(projectId: Int! @eq(key: "project_id")): [Recording] @paginate

	# Session Queries
	getSession(id: Int! @eq): Session @find
	getSessions(projectId: Int! @eq(key: "project_id")): [Session] @paginate

	# Comment Queries
	getComment(id: Int! @eq): Comment @find
	getComments(
		userId: Int @eq(key: "user_id")
		projectId: Int @eq(key: "project_id")
		resourceType: String @eq(key: "resource_type")
		resourceId: Int @eq(key: "resource_id")
	): [Comment] @paginate

	# Collaborator Queries
	getCollaborator(id: Int! @eq): Collaborator @find
	getCollaborators(
		userId: Int @eq(key: "user_id")
		projectId: Int @eq(key: "project_id")
	): [Collaborator] @paginate

	# Person Roles Queries
	getPersonRoles: [PersonRole] @all

	# Instrument Queries
	getInstruments: [Instrument] @all
}

type Mutation {
	# User Mutations
	updateUser(id: ID!, input: UpdateUserInput!): User @update(flatten: true)

	# User Favourite Mutations
	createUserFavourite(input: CreateUserFavouriteInput!): UserFavourite @create(flatten: true)

	# Project Mutations
}

input UpdateUserInput {
	first_name: String
	last_name: String
}

input CreateUserFavouriteInput {
	user: CreateUserFavouriteRelation!
	resource_id: Int!
	resource_type: String!
}

input CreateUserFavouriteRelation {
	connect: ID!
}

interface Favoured {
    id: ID! @globalId
}

#import user.graphql
#import project.graphql
