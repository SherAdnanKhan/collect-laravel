type Project implements Favoured & Creditable & Commentable & EventLoggable {
	id: ID!
	# _id: ID! @globalId @rename(attribute: "id")
	user: User! @belongsTo
	userId: ID! @rename(attribute: "user_id")
	name: String!
	description: String!
	image: String
	label: Party @hasOne
	number: String
	artist: Party @hasOne
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
	collaborators: [Collaborator] @hasMany
	collaboratorCount: Int!
	collaboratorInvites: [CollaboratorInvite] @hasMany
	files(folder_id: ID @eq): [File] @hasMany
	fileCount: Int!
	folders(folder_id: ID @eq): [Folder] @hasMany
	sessions: [Session] @hasMany(type: "paginator")
	sessionCount: Int!
	recordings: [Recording] @hasMany(type: "paginator")
	recordingCount: Int!
	comments: [Comment] @hasMany
	songs: [Song] @hasMany
}

type Collaborator implements EventLoggable {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	type: String!
	user: User @belongsTo
	name: String!
	email: String!
	project: Project! @belongsTo
	recordings: [Recording] @belongsToMany
	accepted: Boolean
	projectId: ID! @rename(attribute: "project_id")
	permissions: [CollaboratorPermission] @hasMany
}

type CollaboratorPermission {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	collaborator: Collaborator @belongsTo
	type: String!
	level: String!
}

type CollaboratorInvite {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	collaborator: Collaborator! @belongsTo
	project: Project! @belongsTo
	token: String!
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
}

type File implements Favoured & Commentable & EventLoggable {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	user: User! @belongsTo
	projectId: ID @rename(attribute: "project_id")
	project: Project @belongsTo
	folder: Folder @belongsTo
	folderId: ID @rename(attribute: "folder_id")
	type: String
	name: String!
	path: String!
	transcoded_path: String
	bitrate: Int
	bitdepth: Int
	size: Int
	status: String!
	isPreviewable: Boolean
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
}

type Folder implements Favoured & Commentable & EventLoggable {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	user: User! @belongsTo
	projectId: ID @rename(attribute: "project_id")
	project: Project @belongsTo
	parentId: ID @rename(attribute: "folder_id")
	parent: Folder @belongsTo
	files: [File] @hasMany
	folders: [Folder] @hasMany
	recording: [Recording] @hasOne
	name: String!
	depth: Int!
	path: [FolderPath]
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
}

type FolderPath {
	id: ID!
	name: String!
}

type Recording implements Favoured & Creditable & Commentable & EventLoggable {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	project: Project @belongsTo
	projectId: ID @rename(attribute: "project_id")
	folderId: ID @rename(attribute: "folder_id")
	party: Party! @belongsTo
	song: Song! @belongsTo
	name: String!
	subtitle: String
	isrc: String
	version: String
	recordedOn: String @rename(attribute: "recorded_on")
	mixedOn: String @rename(attribute: "mixed_on")
	duration: String
	languageId: ID @rename(attribute: "language_id")
	language: Language @belongsTo
	keySignature: String @rename(attribute: "key_signature")
	timeSignature: String @rename(attribute: "time_signature")
	tempo: Int
	type: RecordingType @belongsTo
	typeUserDefinedValue: String @rename(attribute: "recording_type_user_defined_value")
	description: String
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
	sessions: [Session] @belongsToMany
}

type RecordingType {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	name: String!
	ddexKey: String! @rename(attribute: "ddex_key")
	userDefined: Boolean! @rename(attribute: "user_defined")
}

type VersionType {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	name: String!
	ddexKey: String! @rename(attribute: "ddex_key")
	userDefined: Boolean! @rename(attribute: "user_defined")
}

type Session implements Favoured & Creditable & Commentable & EventLoggable {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	project: Project @belongsTo
	projectId: ID  @rename(attribute: "project_id")
	type: SessionType @belongsTo
	sessionType: SessionType @belongsTo
	venue: Venue @belongsTo
	name: String!
	description: String
	startedAt: String! @rename(attribute: "started_at")
	endedAt: String @rename(attribute: "ended_at")
	unionSession: Boolean @rename(attribute: "union_session")
	analogSession: Boolean @rename(attribute: "analog_session")
	dropFrame: Boolean! @rename(attribute: "drop_frame")
	venueRoom: String @rename(attribute: "venue_room")
	bitdepth: Int
	samplerate: Int
	timecodeType: String @rename(attribute: "timecode_type")
	timecodeFrameRate: String @rename(attribute: "timecode_frame_rate")
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
	recordings: [Recording]
}

type SessionType {
	id: ID!
	name: String!
	ddexKey: String! @rename(attribute: "ddex_key")
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
}

type SessionRecording {
	sessionId: ID! @rename(attribute: "session_id")
	recordingId: ID! @rename(attribute: "recording_id")
}

type Comment implements EventLoggable {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	project: Project! @belongsTo
	user: User @belongsTo
	resourceId: Int @rename(attribute: "resource_id")
	resourceType: String @rename(attribute: "resource_type")
	resource: Commentable @rename(attribute: "commentable")
	message: String
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
}

type EventLog {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	user: User! @belongsTo
	project: Project! @belongsTo
	resourceId: Int @rename(attribute: "resource_id")
	resourceType: String @rename(attribute: "resource_type")
	resource: EventLoggable
	action: String
	message: String
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
}

type Venue {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	user: User @belongsTo
	userId: ID! @rename(attribute: "user_id")
	name: String!
	address: String
	country: Country @belongsTo
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
	approved: Boolean
}

type SessionType {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	name: String!
	createdAt: String! @rename(attribute: "created_at")
	updatedAt: String @rename(attribute: "updated_at")
}

type Country {
	_id: ID! @globalId @rename(attribute: "id")
	id: ID!
	name: String!
	isoCode: String! @rename(attribute: "iso_code")
}
