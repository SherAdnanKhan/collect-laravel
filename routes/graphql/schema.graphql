type Query {
    # User Queries
    getMe: User @auth
	getUsers: [User] @paginate
	getUserById(id: Int! @eq): User @find

	# User Favourite Queries
	getUserFavouritesByUserId(userId: Int! @eq(key: "user_id")): [UserFavourite] @paginate

	# User Token Queries
	getUserTwoFactorTokensByUserId(userId: Int! @eq(key: "user_id")): [UserTwoFactorToken] @all

	# subscription Queries
	getSubscriptionsByUserId(userId: Int! @eq(key: "user_id")): [Subscription] @all

	# Project Queries
	getProjects: [Project] @paginate
	getProject(id: Int! @eq): Project @find
	getProjectsByUserId(userId: Int! @eq(key: "user_id")): [Project] @paginate

}

type Mutation {
	# User Mutations

	# User Favourite Mutations
	createUserFavourite(input: CreateUserFavouriteInput!): UserFavourite @create(flatten: true)

	# Project Mutations
}

input CreateUserFavouriteInput {
	user: CreateUserFavouriteRelation!
	resource_id: Int!
	resource_type: String!
}

input CreateUserFavouriteRelation {
	connect: ID!
}

interface Favoured {
    id: ID! @globalId
}

#import user.graphql
#import project.graphql
