type Query {
    # User Queries
    getMe: User @auth
}

extend type Query @group(middleware: ["auth:api"]) {
	getUsers: [User] @paginate
	getUser(id: Int @eq): User @inject(context: "user.id", name: "id") @find

	# User Favourite Queries
	getUserFavourites: [UserFavourite] @paginate(scopes: ["userViewable", "recent"])

	# User Token Queries
	getUserTwoFactorTokens(userId: Int! @eq(key: "user_id")): [UserTwoFactorToken] @all

	# User Subscription Queries
	getSubscription(id: Int! @eq): UserSubscription @find(model: "Laravel\\Cashier\\Subscription")
	getSubscriptions(userId: Int! @eq(key: "user_id")): [UserSubscription] @paginate(model: "Laravel\\Cashier\\Subscription", defaultCount: 1)

	# Person (People) Queries
	getPerson(id: Int! @eq): Person @find
	getPeople: [Person] @all(scopes: ["userViewable"])

	# Project Queries
	getProject(id: ID! @eq): Project @find
	getProjects(userId: Int @eq(key: "user_id")): [Project] @all(scopes: ["userViewable"])

	# Song Queries
	getSong(id: Int! @eq): Song @find
	getSongs(userId: Int @eq(key: "user_id")): [Song] @all(scopes: ["userViewable"])
	getSongsByProject(projectId: Int!): [Song] @field(resolver: "App\\Http\\GraphQL\\Queries\\Song\\ByProject@resolve")

	# File Queries
	getFile(id: Int! @eq): File @find
	getFiles(
		userId: Int @eq(key: "user_id")
		folderId: Int @eq(key: "folder_id")
		projectId: Int @eq(key: "project_id")
	): [File] @paginate(model: "App\\Models\\File", scopes: ["userViewable"], defaultCount: 1000)
	getFilePreview(id: Int!): GetFilePreviewPayload @field(resolver: "App\\Http\\GraphQL\\Queries\\File\\GetPreview@resolve")

	# Folder Queries
	getFolder(id: Int! @eq): Folder @find
	getFolders(
		userId: Int @eq(key: "user_id")
		folderId: Int @eq(key: "folder_id")
		projectId: Int @eq(key: "project_id")
	): [Folder] @all

	# Recording Queries
	getRecording(id: Int! @eq): Recording @find
	getRecordings(projectId: Int @eq(key: "project_id")): [Recording] @paginate(scopes: ["userViewable"], defaultCount: 1000)

	# Session Queries
	getSession(id: Int! @eq): Session @find
	getSessions(projectId: Int! @eq(key: "project_id")): [Session] @paginate(scopes: ["userViewable"], model: "App\\Models\\Session", defaultCount: 1000)

	# Comment Queries
	getComment(id: Int! @eq): Comment @find
	getComments(
		userId: Int @eq(key: "user_id")
		projectId: Int @eq(key: "project_id")
		resourceType: String @eq(key: "resource_type")
		resourceId: Int @eq(key: "resource_id")
	): [Comment] @all

	# Collaborator Queries
	getCollaborator(id: Int! @eq): Collaborator @find
	getCollaborators(
		userId: Int @eq(key: "user_id")
		projectId: Int @eq(key: "project_id")
	): [Collaborator] @paginate

	# Credit Queries
	getCredits(personId: Int! @eq(key: "person_id")): [Credit] @all(scopes: ["userViewable"])
	# getCreditsByProject(projectId: Int!): [Credit] @all(resolver: "App\\Http\\GraphQL\\Queries\\Credit\\ByProject@resolve")

	# Instrument Queries
	getInstruments: [Instrument] @all
}

type Mutation {
	doLogin(input: LoginInput): LoginPayload! @field(resolver: "App\\Http\\GraphQL\\Mutations\\Login@resolve")
	doLogout: LogoutPayload! @field(resolver: "App\\Http\\GraphQL\\Mutations\\Logout@resolve")
}

extend type Mutation @group(middleware: ["auth:api"]) {
	# User Mutations
	updateUser(id: ID!, input: UpdateUserInput!): User @update(flatten: true)
	updateUserProfile(input: UpdateUserProfileInput!): UserProfile @field(resolver: "App\\Http\\GraphQL\\Mutations\\UserProfile\\Update@resolve")

	# User Favourite Mutations
	createUserFavourite(input: CreateUserFavouriteInput!): UserFavourite @field(resolver: "App\\Http\\GraphQL\\Mutations\\UserFavourite\\Create@resolve")
	deleteUserFavourite(input: DeleteUserFavouriteInput!): UserFavourite @field(resolver: "App\\Http\\GraphQL\\Mutations\\UserFavourite\\Delete@resolve")

	# Project Mutations
	createProject(input: CreateProjectInput!): Project @field(resolver: "App\\Http\\GraphQL\\Mutations\\Project\\Create@resolve")
	updateProject(input: UpdateProjectInput!): Project @field(resolver: "App\\Http\\GraphQL\\Mutations\\Project\\Update@resolve")
	deleteProject(input: DeleteProjectInput!): Project @field(resolver: "App\\Http\\GraphQL\\Mutations\\Project\\Delete@resolve")

	# Comment Mutations
	createComment(input: CreateCommentInput!): Comment @field(resolver: "App\\Http\\GraphQL\\Mutations\\Comment\\Create@resolve")
	deleteComment(input: DeleteCommentInput!): Comment @field(resolver: "App\\Http\\GraphQL\\Mutations\\Comment\\Delete@resolve")

	# Recording Mutations
	createRecording(input: CreateRecordingInput!): Recording @field(resolver: "App\\Http\\GraphQL\\Mutations\\Recording\\Create@resolve")
	updateRecording(input: UpdateRecordingInput!): Recording @field(resolver: "App\\Http\\GraphQL\\Mutations\\Recording\\Update@resolve")
	deleteRecording(input: DeleteRecordingInput!): Recording @field(resolver: "App\\Http\\GraphQL\\Mutations\\Recording\\Delete@resolve")

	# Recording Mutations
	createSession(input: CreateSessionInput!): Session @field(resolver: "App\\Http\\GraphQL\\Mutations\\Session\\Create@resolve")
	updateSession(input: UpdateSessionInput!): Session @field(resolver: "App\\Http\\GraphQL\\Mutations\\Session\\Update@resolve")
	deleteSession(input: DeleteSessionInput!): Session @field(resolver: "App\\Http\\GraphQL\\Mutations\\Session\\Delete@resolve")

	# Song Mutations
	createSong(input: CreateSongInput!): Song @field(resolver: "App\\Http\\GraphQL\\Mutations\\Song\\Create@resolve")
	updateSong(input: UpdateSongInput!): Song @field(resolver: "App\\Http\\GraphQL\\Mutations\\Song\\Update@resolve")
	deleteSong(input: DeleteSongInput!): Song @field(resolver: "App\\Http\\GraphQL\\Mutations\\Song\\Delete@resolve")

	# Person Mutations
	createPerson(input: CreatePersonInput!): Person @field(resolver: "App\\Http\\GraphQL\\Mutations\\Person\\Create@resolve")
	updatePerson(input: UpdatePersonInput!): Person @field(resolver: "App\\Http\\GraphQL\\Mutations\\Person\\Update@resolve")
	deletePerson(input: DeletePersonInput!): Person @field(resolver: "App\\Http\\GraphQL\\Mutations\\Person\\Delete@resolve")

	# Collaborator Mutations
	createCollaborator(input: CreateCollaboratorInput!): Collaborator @field(resolver: "App\\Http\\GraphQL\\Mutations\\Collaborator\\Create@resolve")
	deleteCollaborator(input: DeleteCollaboratorInput!): Collaborator @field(resolver: "App\\Http\\GraphQL\\Mutations\\Collaborator\\Delete@resolve")

	# Credit Mutations
	createCredit(input: CreateCreditInput!): Credit @field(resolver: "App\\Http\\GraphQL\\Mutations\\Credit\\Create@resolve")
	deleteCredit(input: DeleteCreditInput!): Credit @field(resolver: "App\\Http\\GraphQL\\Mutations\\Credit\\Delete@resolve")

	# File & Folder Mutations
	downloadFiles(files: [DownloadFilesInput!]!): DownloadFilesPayload @field(resolver: "App\\Http\\GraphQL\\Mutations\\DownloadFiles@resolve")
	deleteFiles(files: [DeleteFilesInput!]!): DeleteFilesPayload @field(resolver: "App\\Http\\GraphQL\\Mutations\\DeleteFiles@resolve")
	createFolder(input: CreateFolderInput!): Folder @field(resolver: "App\\Http\\GraphQL\\Mutations\\CreateFolder@resolve")
}

#import inputs.graphql
#import payloads.graphql
#import interfaces.graphql
#import user.graphql
#import project.graphql
